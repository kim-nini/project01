<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper   namespace="com.ezen.grrreung.domain.item.mapper.ItemMapper">

	<!-- 판매중인상품만 아이템 아이디순(최신 등록순)으로 보여주게 처리 -->
	<select id="findAllItems" resultType="Item">
		SELECT item_id,   cate_code, item_name, item_price, item_amount, item_detail, item_sell_status
		FROM item
		WHERE item_sell_status = 'sell'
		ORDER BY item_id DESC
	</select>

	<!-- 상품 번호로 1개의 상품 조회 -->
	<select id="findByItemId" parameterType="int" resultType="Item">
		SELECT item_id,   cate_code, item_name, item_price, item_amount, item_detail,   item_sell_status
		FROM item
		<where>
			<if test="item_id != null">
				item_id = #{itemId}
			</if>
		</where>
	</select>

	<!-- 카테고리(버튼사용)로 상품 검색하기 -->
	<select id="findByCategory" parameterType="RequestParams" resultType="Item">
		SELECT
			c.cate_code,
			c.cate_top,
			i.item_id,
			i.item_name,
			i.item_price,
			i.item_detail,
			i.item_sell_status
		FROM category c
				 INNER JOIN item i ON c.cate_code = i.cate_code
		WHERE item_sell_status = 'sell' AND cate_top = #{search}
		ORDER BY item_id DESC
		LIMIT #{elementSize} OFFSET #{offset}
	</select>

	<!-- 상품 이미지중 대표사진 *썸네일* 검색 -->
	<select id="findThumbnail" parameterType="int" resultType="string">
		SELECT
			M.img_name
		FROM item_img M
				 INNER JOIN item I
							ON I.item_id = M.item_id
		WHERE I.item_id = #{value} AND M.rep_img_yn= 'Y'
	</select>

	<!-- 상품 이미지 전체 불러오기 descripion 제외-->
	<select id="findItemImages" parameterType="int" resultType="map">
		SELECT
			i.item_id,
			m.img_name,
			m.item_img_id,
			m.img_url,
			m.rep_img_yn
		FROM
			item_img m
				INNER JOIN item i ON i.item_id = m.item_id
		WHERE
			i.item_id = #{value} and
			NOT m.img_name LIKE '%description%'
		ORDER BY item_id ASC
	</select>

	<!-- 상세설명(이미지파일) 가져오기 -->
	<select id="findDescriptionImages" parameterType="int" resultType="map">
		SELECT
			i.item_id,
			m.img_name,
			m.img_url,
			m.rep_img_yn
		FROM
			item_img m
				INNER JOIN item i ON i.item_id = m.item_id
		WHERE
			i.item_id = #{value} and
			img_name LIKE '%description%'
		ORDER  BY img_name ASC
	</select>


	<!-- 카테고리 이름 가져오기-->
	<select id="findCateAll" resultType="Category">
		SELECT
			DISTINCT cate_top
		FROM
			category
	</select>

	<!-- 카테고리 이름 가져오기 상위카테고리명으로 검색함 -->
	<select id="findCateName" parameterType="string" resultType="Category">
		SELECT
			cate_code,
			cate_name,
			cate_top
		FROM
			category
		WHERE
			cate_top = #{value}
	</select>



	<!-- 요청 파라미터 값에 따른 아이템 목록 => 상품명으로 검색하기 -->
	<select id="findByParams" parameterType="RequestParams" resultType="Item">
		SELECT
		item_id,
		item_name,
		item_price
		FROM
		item
		WHERE
		item_sell_status = 'sell'
		<if test="search != null">
			AND (item_name LIKE CONCAT('%', #{search}, '%'))
		</if>
		ORDER BY item_id DESC
		LIMIT #{elementSize} OFFSET #{offset}
	</select>


	<!-- 요청 파라미터에 해당하는 상품 개수 -->
	<select id="countByParams" parameterType="RequestParams" resultType="int">
		SELECT
		COUNT(*) count
		FROM
		item
		<where>
			<if test="search != null">
				item_name LIKE CONCAT('%', #{search}, '%') AND
			</if>
			item_sell_status LIKE 'sell'
		</where>
	</select>


	<!-- 상품 등록하기 -->
	<insert id="createItem" parameterType="Item">
		INSERT INTO item(item_id, cate_code, item_name, item_price ,item_amount, item_detail)
		VALUES (#{itemId}, #{cateCode}, #{itemName}, #{itemPrice}, #{itemAmount}, #{itemDetail})
	</insert>

	<!-- 상품 이미지 업로드 처리-->
	<insert id="insertItemImg" parameterType="ItemImg">
		<selectKey keyProperty="itemImgId" resultType="int" order="BEFORE">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO item_img(item_id, img_name, ori_img_name, rep_img_yn)
		VALUES (#{itemId}, #{imgName}, #{oriImgName}, #{repImgYN})
	</insert>

	<!-- 상품 정보 조회 => 수정페이지에서 보여줄 내용 출력함 -->
	<select id="updateItemInfo" parameterType="int" resultType="map">
		SELECT
			c.cate_top,
			c.cate_name,
			i.item_name,
			i.item_id,
			i.item_price,
			i.item_amount,
			i.item_detail,
			i.item_sell_status
		FROM
			category c
				INNER JOIN item i
				ON c.cate_code = i.cate_code
		WHERE i.item_id = #{value}
	</select>

	<!-- 상품 삭제 처리 -->
	<delete id="deleteByItemId" parameterType="int">
		DELETE  FROM item
		WHERE item_id = #{itemId}
	</delete>



	<!-- itemId로 카테고리 가져오기 -->
	<select id="getCateByItemId" parameterType="int" resultType="Category">
		SELECT
			*
		FROM
			category
		WHERE
				cate_code = (
				SELECT
					cate_code
				FROM
					item
				WHERE
					item_id = #{itemId}
			)
	</select>




</mapper>